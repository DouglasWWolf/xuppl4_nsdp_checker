//=====================================================
// This file was auto-generated by xlate_vreg v1.1
//            -->  DO NOT EDIT!  <-- 
//=====================================================
#ifndef _FPGA_REG_H
#define _FPGA_REG_H


//
// Register:    RTL_MAJOR
// Size:        32-bits
// Description: "major" portion of RTL revision "major.minor.build"
//
#define RTL_MAJOR                                                    0x0000000000000000ULL


//
// Register:    RTL_MINOR
// Size:        32-bits
// Description: "minor" portion of RTL revision "major.minor.build"
//
#define RTL_MINOR                                                    0x0000000000000004ULL


//
// Register:    RTL_BUILD
// Size:        32-bits
// Description: "build" portion of RTL revision "major.minor.build"
//
#define RTL_BUILD                                                    0x0000000000000008ULL


//
// Register:    RTL_DATE
// Size:        32-bits
// Description: Build date
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//     month                          8   31:24 RO   N/A         Build month (1 thru 12)
//     day                            8   23:16 RO   N/A         Build date  (1 thru 31)
//     year                           16  15:00 RO   N/A         Build year  (4 digit year)
//
#define RTL_DATE                                                     0x0000000000000010ULL
#define RTL_DATE_month                                               0x0818000000000010ULL
#define RTL_DATE_day                                                 0x0810000000000010ULL
#define RTL_DATE_year                                                0x1000000000000010ULL


//
// Register:    RTL_TYPE
// Size:        32-bits
// Description: Uniquely identifies this RTL design
//
#define RTL_TYPE                                                     0x0000000000000014ULL


//
// Register:    RTL_TIME
// Size:        32-bits
// Description: Build date
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//     hour                           8   23:16 RO   N/A         Build month (0 thru 23)
//     min                            8   15:08 RO   N/A         Build date  (0 thru 59)
//     sec                            8   07:00 RO   N/A         Build year  (0 thru 59)
//
#define RTL_TIME                                                     0x000000000000001cULL
#define RTL_TIME_hour                                                0x081000000000001cULL
#define RTL_TIME_min                                                 0x080800000000001cULL
#define RTL_TIME_sec                                                 0x080000000000001cULL


//
// Register:    RTL_GIT_HASH
// Size:        This is an array of five consecutive 32-bit registers
// Description: Git commit hash
//
#define RTL_GIT_HASH                                                 0x0000000000000040ULL


//
// Register:    ETH_STATUS
// Size:        32-bits
// Description: Link status bits for the two Ethernet/QSFP ports
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//     qsfp0                          1       0 RO   n/a         QSFP_0 link status
//     qsfp1                          1      16 RO   n/a         QSFP_1 link_status
//
#define ETH_STATUS                                                   0x0000000000000500ULL
#define ETH_STATUS_qsfp0                                             0x0100000000000500ULL
#define ETH_STATUS_qsfp1                                             0x0110000000000500ULL


//
// Register:    FIFO_RESET
// Size:        32-bits
// Description: Write a 1 to this register to reset the system to its initial state
//              This register will stay '1' until the reset completes at which point
//              it will auto-clear to 0.
//
#define FIFO_RESET                                                   0x0000000000001004ULL


//
// Register:    FIFO_LOAD
// Size:        32-bits
// Description: Writing a 32-bit value to this register writes that value to the
//              frame-data FIFO.
//              Reading this register returns the number of items in the frame-
//              data-FIFO.
//
#define FIFO_LOAD                                                    0x0000000000001008ULL


//
// Register:    FIFO_START
// Size:        32-bits
// Description: After loading the FIFO with the expected frame-data, write a 1
//              to this register to begin accepting and check packets.
//
#define FIFO_START                                                   0x0000000000001010ULL


//
// Register:    FIFO_CONT_MODE
// Size:        32-bits
// Description: This register should contain a 1, which is its default value at reset
//
#define FIFO_CONT_MODE                                               0x0000000000001014ULL


//
// Register:    MCC_RFD_ADDR
// Size:        64-bits
// Description: RDMX address of the frame-data buffer
//
#define MCC_RFD_ADDR                                                 0x0000000000002000ULL


//
// Register:    MCC_RFD_SIZE
// Size:        64-bits
// Description: Size of the frame-data buffer (in bytes)
//
#define MCC_RFD_SIZE                                                 0x0000000000002008ULL


//
// Register:    MCC_RMD_ADDR
// Size:        64-bits
// Description: RDMX address of the meta-data buffer
//
#define MCC_RMD_ADDR                                                 0x0000000000002010ULL


//
// Register:    MCC_RMD_SIZE
// Size:        64-bits
// Description: Size of the meta-data buffer (in bytes)
//
#define MCC_RMD_SIZE                                                 0x0000000000002018ULL


//
// Register:    MCC_RFC_ADDR
// Size:        64-bits
// Description: RDMX address of the frame-counter
//
#define MCC_RFC_ADDR                                                 0x0000000000002020ULL


//
// Register:    MCC_FRAME_SIZE
// Size:        32-bits
// Description: Size of a frame in bytes, typically 0x40_0000
//
#define MCC_FRAME_SIZE                                               0x0000000000002028ULL


//
// Register:    MCC_PACKET_SIZE
// Size:        32-bits
// Description: Size of the payload in a frame-data packet, typically 4096
//
#define MCC_PACKET_SIZE                                              0x000000000000202cULL


//
// Register:    MCC_IGNORE_RDMX_FLAGS
// Size:        32-bits
// Description: If this is 1, checks of the RDMX flags are not performed
//
#define MCC_IGNORE_RDMX_FLAGS                                        0x0000000000002034ULL


//
// Register:    CH0_RUN_STATUS
// Size:        32-bits
// Description: This will be a 1 in normal operation and will change to 0
//              when an error occurs
//
#define CH0_RUN_STATUS                                               0x0000000000003000ULL


//
// Register:    CH0_ETH_ACTIVE
// Size:        32-bits
// Description: 1 = Data activity detected on the Ethernet port
//              0 = No recent data activity detected on Ethernet port
//
#define CH0_ETH_ACTIVE                                               0x0000000000003004ULL


//
// Register:    CH0_ERROR
// Size:        32-bits
// Description: Bitmap of errors detected.
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//     bad_fd_magic                   1       0 RO   0           Bad magic number in frame-data header
//     bad_fd_magic                   1       1 RO   0           Bad sequence number in frame-data header
//     bad_fd_magic                   1       2 RO   0           Bad IPv4 packet-size in frame-data header
//     bad_fd_taddr                   1       3 RO   0           Bad RDMX target address in frame-data header
//     bad_fd                         1       4 RO   0           Bad frame-data
//     bad_fd_plen                    1       5 RO   0           Bad frame-data packet length
//     bad_md_magic                   1       6 RO   0           Bad magic number in meta-data header
//     bad_md_magic                   1       7 RO   0           Bad sequence number in meta-data header
//     bad_md_magic                   1       8 RO   0           Bad IPv4 packet-size in meta-data header
//     bad_md_taddr                   1       9 RO   0           Bad RDMX target address in meta-data header
//     reserved_1                     1      10 RO   0           Reserved
//     bad_md_plen                    1      11 RO   0           Bad meta-data packet length
//     bad_fc_magic                   1      12 RO   0           Bad magic number in frame-counter header
//     bad_fc_magic                   1      13 RO   0           Bad sequence number in frame-counter header
//     bad_fc_magic                   1      14 RO   0           Bad IPv4 packet-size in frame-counter header
//     bad_fc_taddr                   1      15 RO   0           Bad RDMX target address in frame-counter header
//     bad_fc                         1      16 RO   0           Bad frame-counter
//     bad_fc_plen                    1      17 RO   0           Bad frame-counter packet length
//     reserved_2                     14  31:18 RO   0           Reserved
//
#define CH0_ERROR                                                    0x0000000000003008ULL
#define CH0_ERROR_bad_fd_magic                                       0x0100000000003008ULL
#define CH0_ERROR_bad_fd_magic                                       0x0101000000003008ULL
#define CH0_ERROR_bad_fd_magic                                       0x0102000000003008ULL
#define CH0_ERROR_bad_fd_taddr                                       0x0103000000003008ULL
#define CH0_ERROR_bad_fd                                             0x0104000000003008ULL
#define CH0_ERROR_bad_fd_plen                                        0x0105000000003008ULL
#define CH0_ERROR_bad_md_magic                                       0x0106000000003008ULL
#define CH0_ERROR_bad_md_magic                                       0x0107000000003008ULL
#define CH0_ERROR_bad_md_magic                                       0x0108000000003008ULL
#define CH0_ERROR_bad_md_taddr                                       0x0109000000003008ULL
#define CH0_ERROR_reserved_1                                         0x010a000000003008ULL
#define CH0_ERROR_bad_md_plen                                        0x010b000000003008ULL
#define CH0_ERROR_bad_fc_magic                                       0x010c000000003008ULL
#define CH0_ERROR_bad_fc_magic                                       0x010d000000003008ULL
#define CH0_ERROR_bad_fc_magic                                       0x010e000000003008ULL
#define CH0_ERROR_bad_fc_taddr                                       0x010f000000003008ULL
#define CH0_ERROR_bad_fc                                             0x0110000000003008ULL
#define CH0_ERROR_bad_fc_plen                                        0x0111000000003008ULL
#define CH0_ERROR_reserved_2                                         0x0e12000000003008ULL


//
// Register:    CH0_PKTS_RCVD
// Size:        64-bits
// Description: Count of the number of packets received
//
#define CH0_PKTS_RCVD                                                0x000000000000300cULL


//
// Register:    CH0_EXP_FDATA
// Size:        32-bits
// Description: When an error occurs, this register holds the expected frame-data
//
#define CH0_EXP_FDATA                                                0x0000000000003014ULL


//
// Register:    CH0_EXP_TADDR
// Size:        64-bits
// Description: When an error occurs, this register holds the expected RDMX target address
//
#define CH0_EXP_TADDR                                                0x0000000000003018ULL


//
// Register:    CH0_EXP_FCTR
// Size:        32-bits
// Description: When an error occurs, this register holds the expected frame counter
//
#define CH0_EXP_FCTR                                                 0x0000000000003020ULL


//
// Register:    CH0_EXP_SEQ
// Size:        32-bits
// Description: When an error occurs, this register holds the expected RDMX sequence number
//
#define CH0_EXP_SEQ                                                  0x0000000000003024ULL


//
// Register:    CH0_MALFORMED
// Size:        64-bits
// Description: Count of corrupted packets received
//
#define CH0_MALFORMED                                                0x0000000000003028ULL


//
// Register:    CH0_ERR_DATA
// Size:        An array of 16 32-bit registers
// Description: These registers hold the 64-bytes of data that caused the error.
//
#define CH0_ERR_DATA                                                 0x0000000000003040ULL


//
// Register:    CH1_RUN_STATUS
// Size:        32-bits
// Description: This will be a 1 in normal operation and will change to 0
//              when an error occurs
//
#define CH1_RUN_STATUS                                               0x0000000000004000ULL


//
// Register:    CH1_ETH_ACTIVE
// Size:        32-bits
// Description: 1 = Data activity detected on the Ethernet port
//              0 = No recent data activity detected on Ethernet port
//
#define CH1_ETH_ACTIVE                                               0x0000000000004004ULL


//
// Register:    CH1_ERROR
// Size:        32-bits
// Description: Bitmap of errors detected.
//
// Fields:
//     NAME                           WID   POS TYPE RESET       DESCRIPTION
//     bad_fd_magic                   1       0 RO   0           Bad magic number in frame-data header
//     bad_fd_magic                   1       1 RO   0           Bad sequence number in frame-data header
//     bad_fd_magic                   1       2 RO   0           Bad IPv4 packet-size in frame-data header
//     bad_fd_taddr                   1       3 RO   0           Bad RDMX target address in frame-data header
//     bad_fd                         1       4 RO   0           Bad frame-data
//     bad_fd_plen                    1       5 RO   0           Bad frame-data packet length
//     bad_md_magic                   1       6 RO   0           Bad magic number in meta-data header
//     bad_md_magic                   1       7 RO   0           Bad sequence number in meta-data header
//     bad_md_magic                   1       8 RO   0           Bad IPv4 packet-size in meta-data header
//     bad_md_taddr                   1       9 RO   0           Bad RDMX target address in meta-data header
//     reserved_1                     1      10 RO   0           Reserved
//     bad_md_plen                    1      11 RO   0           Bad meta-data packet length
//     bad_fc_magic                   1      12 RO   0           Bad magic number in frame-counter header
//     bad_fc_magic                   1      13 RO   0           Bad sequence number in frame-counter header
//     bad_fc_magic                   1      14 RO   0           Bad IPv4 packet-size in frame-counter header
//     bad_fc_taddr                   1      15 RO   0           Bad RDMX target address in frame-counter header
//     bad_fc                         1      16 RO   0           Bad frame-counter
//     bad_fc_plen                    1      17 RO   0           Bad frame-counter packet length
//     reserved_2                     14  31:18 RO   0           Reserved
//
#define CH1_ERROR                                                    0x0000000000004008ULL
#define CH1_ERROR_bad_fd_magic                                       0x0100000000004008ULL
#define CH1_ERROR_bad_fd_magic                                       0x0101000000004008ULL
#define CH1_ERROR_bad_fd_magic                                       0x0102000000004008ULL
#define CH1_ERROR_bad_fd_taddr                                       0x0103000000004008ULL
#define CH1_ERROR_bad_fd                                             0x0104000000004008ULL
#define CH1_ERROR_bad_fd_plen                                        0x0105000000004008ULL
#define CH1_ERROR_bad_md_magic                                       0x0106000000004008ULL
#define CH1_ERROR_bad_md_magic                                       0x0107000000004008ULL
#define CH1_ERROR_bad_md_magic                                       0x0108000000004008ULL
#define CH1_ERROR_bad_md_taddr                                       0x0109000000004008ULL
#define CH1_ERROR_reserved_1                                         0x010a000000004008ULL
#define CH1_ERROR_bad_md_plen                                        0x010b000000004008ULL
#define CH1_ERROR_bad_fc_magic                                       0x010c000000004008ULL
#define CH1_ERROR_bad_fc_magic                                       0x010d000000004008ULL
#define CH1_ERROR_bad_fc_magic                                       0x010e000000004008ULL
#define CH1_ERROR_bad_fc_taddr                                       0x010f000000004008ULL
#define CH1_ERROR_bad_fc                                             0x0110000000004008ULL
#define CH1_ERROR_bad_fc_plen                                        0x0111000000004008ULL
#define CH1_ERROR_reserved_2                                         0x0e12000000004008ULL


//
// Register:    CH1_PKTS_RCVD
// Size:        64-bits
// Description: Count of the number of packets received
//
#define CH1_PKTS_RCVD                                                0x000000000000400cULL


//
// Register:    CH1_EXP_FDATA
// Size:        32-bits
// Description: When an error occurs, this register holds the expected frame-data
//
#define CH1_EXP_FDATA                                                0x0000000000004014ULL


//
// Register:    CH1_EXP_TADDR
// Size:        64-bits
// Description: When an error occurs, this register holds the expected RDMX target address
//
#define CH1_EXP_TADDR                                                0x0000000000004018ULL


//
// Register:    CH1_EXP_FCTR
// Size:        32-bits
// Description: When an error occurs, this register holds the expected frame counter
//
#define CH1_EXP_FCTR                                                 0x0000000000004020ULL


//
// Register:    CH1_EXP_SEQ
// Size:        32-bits
// Description: When an error occurs, this register holds the expected RDMX sequence number
//
#define CH1_EXP_SEQ                                                  0x0000000000004024ULL


//
// Register:    CH1_MALFORMED
// Size:        64-bits
// Description: Count of corrupted packets received
//
#define CH1_MALFORMED                                                0x0000000000004028ULL


//
// Register:    CH1_ERR_DATA
// Size:        An array of 16 32-bit registers
// Description: These registers hold the 64-bytes of data that caused the error.
//
#define CH1_ERR_DATA                                                 0x0000000000004040ULL



#endif
